# -*- coding: utf-8 -*-
"""humanposeest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LSf-2eufO-IOq7mYmxm9ilh8QOUNamma
"""

import cv2  # Handling images and drawing on them
import numpy as np  # Numerics/points calculations
import matplotlib.pyplot as plt
import tensorflow

body_parts = {
    "Nose": 0, "Neck": 1, "RShoulder": 2, "RElbow": 3, "RWrist": 4,
    "LShoulder": 5, "LElbow": 6, "LWrist": 7, "RHip": 8, "RKnee": 9,
    "RAnkle": 10, "LHip": 11, "LKnee": 12, "LAnkle": 13, "REye": 14,
    "LEye": 15, "REar": 16, "LEar": 17, "Background": 18
}

pose_pairs = [
    ["Neck", "RShoulder"], ["Neck", "LShoulder"], ["RShoulder", "RElbow"], ["RElbow", "RWrist"],
    ["LShoulder", "LElbow"], ["LElbow", "LWrist"], ["Neck", "RHip"], ["RHip", "RKnee"], ["RKnee", "RAnkle"],
    ["Neck", "LHip"], ["LHip", "LKnee"], ["LKnee", "LAnkle"], ["Neck", "Nose"], ["Nose", "REye"],
    ["REye", "REar"], ["Nose", "LEye"], ["LEye", "LEar"]
]

width=368
height=368
inWidth=width
inHeight=height


net = cv2.dnn.readNetFromTensorflow("graph_opt.pb")

thres = 0.2

def poseDetector(frame):
    frameWidth = frame.shape[1]
    frameHeight = frame.shape[0]

    net.setInput(cv2.dnn.blobFromImage(frame, 1.0, (inWidth, inHeight), (127.5, 127.5, 127.5), swapRB=True, crop=False))

    out = net.forward()
    out = out[:, :19, :, :]

    assert len(body_parts) == out.shape[1]

    points = []
    for i in range(len(body_parts)):
        heatMap = out[0, i, :, :]
        _, conf, _, point = cv2.minMaxLoc(heatMap)
        x = (frameWidth * point[0]) / out.shape[3]
        y = (frameHeight * point[1]) / out.shape[2]
        points.append((int(x), int(y)) if conf > thres else None)

    for pair in pose_pairs:
        partFrom = pair[0]
        partTo = pair[1]
        if partFrom not in body_parts:
            print(f"Warning: {partFrom} is missing from body_parts")
        if partTo not in body_parts:
            print(f"Warning: {partTo} is missing from body_parts")

        assert partFrom in body_parts, f"{partFrom} is not in body_parts"
        assert partTo in body_parts, f"{partTo} is not in body_parts"
        idFrom = body_parts[partFrom]
        idTo = body_parts[partTo]

        if points[idFrom] and points[idTo]:
            cv2.line(frame, points[idFrom], points[idTo], (0, 255, 0), 3)
            cv2.ellipse(frame, points[idFrom], (3, 3), 0, 0, 360, (0, 0, 255), cv2.FILLED)
            cv2.ellipse(frame, points[idTo], (3, 3), 0, 0, 360, (0, 0, 255), cv2.FILLED)

    return frame  # Ensure return is outside all loops


# Read the input image
input = cv2.imread('stand.jpg')

# Perform pose detection
output = poseDetector(input)

# Save the output image
cv2.imwrite('output.png', output)

cv2.waitKey(0)
cv2.destroyAllWindows()